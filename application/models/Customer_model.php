<?php
/**
 * Developer: Распутний Сергей Викторович
 * Site: cms.autoxcatalog.com
 * Email: sergey.rasputniy@gmail.com
 */

defined('BASEPATH') OR exit('No direct script access allowed');

class Customer_model extends Default_model
{
    public $table = 'customer';

    private $customer_info;

    public function __construct()
    {
        if ($this->is_login()) {
            $this->customer_info = $this->get($this->is_login());
        }
    }

    public function __get($key)
    {
        if (isset($this->customer_info[$key])) {
            return $this->customer_info[$key];
        }
        return parent::__get($key); // TODO: Change the autogenerated stub
    }

    public function is_login($redirect = false)
    {
        if ($this->session->customer_id) {
            return $this->session->customer_id;
        } else {
            if ($redirect) {
                redirect($redirect);
            }
            return false;
        }
    }

    public function login($login, $password, $admin_login = false)
    {
        //$this->db->or_where('id', (int)$login);
        if ($phone = format_phone($login)) {
            $this->db->or_where('phone', $phone);
        }

        if (filter_var($login, FILTER_VALIDATE_EMAIL)) {
            $this->db->or_where('email', trim($login));
        }

        if ($admin_login) {
            $this->db->where('id', (int)$admin_login);
        }

        $this->db->where('status', true);
        $query = $this->db->get($this->table);

        if ($query->num_rows() > 0) {
            $existingHashFromDb = $query->row_array()['password'];
            $isPasswordCorrect = password_verify($password, $existingHashFromDb);
            if ($isPasswordCorrect || $admin_login) {
                $this->config->set_item('sess_expiration', $this->config->item('remember_sess_expiration'));
                $newdata = array(
                    'customer_id' => $query->row_array()['id'],
                    'customer_group_id' => $query->row_array()['customer_group_id'],
                    'customer_name' => $query->row_array()['first_name'] . ' ' . $query->row_array()['second_name']
                );

                $this->session->set_userdata($newdata);

                $this->load->model('cart_model');
                $cart_data = $this->cart_model->cart_get($query->row_array()['id']);

                if ($cart_data) {
                    //Обновляем в моделях данные
                    $this->customer_info = $this->get($query->row_array()['id']);
                    $this->customergroup_model->customer_group = $this->customergroup_model->get_customer_group();
                    if ($this->customergroup_model->customer_group) {
                        $this->load->model('customer_group_pricing_model');
                        $this->customer_group_pricing_model->pricing = $this->customer_group_pricing_model->get_customer_group_pricing($this->customergroup_model->customer_group['id']);
                    }

                    $cart_contents = unserialize($cart_data['cart_data']);
                    if ($admin_login) {
                        $this->load->library('cart');
                    }
                    unset($cart_contents['cart_total']);
                    unset($cart_contents['total_items']);

                    if (count($cart_contents) > 0) {
                        foreach ($cart_contents as $product) {
                            $this->cart_model->addCart($product['product_id'], $product['supplier_id'], $product['term'], $product['qty']);
                        }
                    }
                }

                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    public function search($term)
    {
        $this->db->select('id as value, CONCAT_WS(" ", first_name, second_name, phone) as label', false);
        $this->db->or_like('first_name', $term);
        $this->db->or_like('second_name', $term);
        $this->db->or_like('phone', $term);
        $this->db->or_like('email', $term);
        return $this->db->get($this->table)->result_array();
    }

    public function customer_count_all()
    {
        if ($this->input->get()) {
            if ($this->input->get('id')) {
                $this->db->where('id', (int)$this->input->get('id'));
            }
            if ($this->input->get('customer_group_id')) {
                $this->db->where('customer_group_id', $this->input->get('customer_group_id', true));
            }
            if ($this->input->get('first_name')) {
                $this->db->like('first_name', $this->input->get('first_name', true));
            }
            if ($this->input->get('second_name')) {
                $this->db->like('second_name', $this->input->get('second_name', true));
            }
            if ($this->input->get('email')) {
                $this->db->like('email', $this->input->get('email', true));
            }
            if ($this->input->get('phone')) {
                $this->db->like('phone', $this->input->get('phone', true));
            }
            if ($this->input->get('status')) {
                $this->db->where('status', $this->input->get('status', true));
            }
            if ($this->input->get('balance')) {
                $this->db->where('balance <', 0);
            }
            return $this->db->count_all_results($this->table);
        } else {
            return $this->db->count_all($this->table);
        }
    }

    public function customer_get_all($limit = false, $start = false, $order_status = false)
    {
        $this->db->select('*');
        //Получаем суммы заказов по покупателям
        if ($order_status) {
            foreach ($order_status as $status_id => $value) {
                $this->db->select('(SELECT SUM(total) FROM ax_order WHERE customer_id = ax_customer.id AND status = "' . (int)$status_id . '") as sum_' . (int)$status_id);
            }
        }
        $this->db->from($this->table);
        if ($this->input->get()) {
            if ($this->input->get('id')) {
                $this->db->where('id', (int)$this->input->get('id'));
            }
            if ($this->input->get('customer_group_id')) {
                $this->db->where('customer_group_id', $this->input->get('customer_group_id', true));
            }
            if ($this->input->get('first_name')) {
                $this->db->like('first_name', $this->input->get('first_name', true));
            }
            if ($this->input->get('second_name')) {
                $this->db->like('second_name', $this->input->get('second_name', true));
            }
            if ($this->input->get('email')) {
                $this->db->like('email', $this->input->get('email', true));
            }
            if ($this->input->get('phone')) {
                $this->db->like('phone', $this->input->get('phone', true));
            }
            if ($this->input->get('status')) {
                $this->db->where('status', $this->input->get('status', true));
            }
            if ($this->input->get('balance')) {
                $this->db->where('balance <', 0);
            }
        }

        if ($limit && $start) {
            $this->db->limit((int)$limit, (int)$start);
        } elseif ($limit) {
            $this->db->limit((int)$limit);
        }
        if ($this->input->get('balance')) {
            $this->db->order_by('customer.balance', 'ASC');
        } else {
            $this->db->order_by('customer.id', 'DESC');
        }


        $query = $this->db->get();

        if ($query->num_rows() > 0) {
            return $query->result_array();
        }
        return false;
    }

    public function getByPhone($phone)
    {
        $this->db->where('phone', format_phone($phone));
        $this->db->where('status', true);
        $query = $this->db->get($this->table);
        if ($query->num_rows() > 0) {
            return $query->row_array();
        }
        return false;
    }

    public function getByEmail($email)
    {
        $this->db->where('email', $email);
        $query = $this->db->get($this->table);
        if ($query->num_rows() > 0) {
            return $query->row_array();
        }
        return false;
    }

    public function getBalance($customer_id)
    {
        $this->db->select('balance');
        $this->db->where('id', (int)$customer_id);
        $query = $this->db->get($this->table);
        if ($query->num_rows() > 0) {
            return $query->row_array()['balance'];
        }
        return false;
    }

    public function export_csv()
    {
        $this->load->dbutil();
        $query = $this->db->query("SELECT * FROM ax_customer");
        $delimiter = ";";
        $newline = "\r\n";
        $enclosure = '"';
        header('Content-Type: text/csv; charset=utf-8');
        header('Content-Disposition: attachment; filename=data.csv');
        // create a file pointer connected to the output stream
        $output = fopen('php://output', 'w');
        fwrite($output, $this->dbutil->csv_from_result($query, $delimiter, $newline, $enclosure));
    }

    //Расчет долга по деталям в работе
    public function getWorkBalance($customer_id)
    {
        $this->load->model('orderstatus_model');
        $close_status = [];
        //Получаем статусы которые относятся к закрытым
        $statuses = $this->orderstatus_model->status_get_all();
        if ($statuses) {
            foreach ($statuses as $status) {
                if ($status['is_complete'] || $status['is_return']) {
                    $close_status[] = $status['id'];
                }
            }
        }

        $sql = "SELECT SUM(op.price * op.quantity) as total FROM ax_order_product op 
                LEFT JOIN ax_order o ON o.id = op.order_id
                LEFT JOIN ax_customer c ON c.id = o.customer_id WHERE op.status_id NOT IN (" . implode(',', $close_status) . ") AND o.customer_id = '" . (int)$customer_id . "'";

        $result = $this->db->query($sql)->row_array();

        $total = $result['total'];

        $customer_info = $this->get($customer_id);

        return (-$total + $customer_info['balance']);
    }
}